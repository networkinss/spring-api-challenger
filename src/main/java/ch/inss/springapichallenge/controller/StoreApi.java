/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ch.inss.springapichallenge.controller;

import ch.inss.springapichallenge.model.Order;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.virtualan.annotation.ApiVirtual;
import io.virtualan.annotation.VirtualService;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-19T22:52:29.404957+01:00[Europe/Zurich]")
@Validated
@Tag(name = "store", description = "Operations about user")
@VirtualService
@RequestMapping("${openapi.apichallenger.base-path:/api/v3}")
public interface StoreApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /store/order/{orderId} : Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     *
     * @param orderId ID of the order that needs to be deleted (required)
     * @return order deleted. (status code 201)
     * or Invalid ID supplied (status code 400)
     * or Order not found (status code 404)
     */
    @ApiVirtual
    @Operation(
            operationId = "deleteOrder",
            summary = "Delete purchase order by ID",
            tags = {"store"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "order deleted."),
                    @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                    @ApiResponse(responseCode = "404", description = "Order not found")
            }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/store/order/{orderId}"
    )
    default ResponseEntity<Void> deleteOrder(
        @Parameter(name = "orderId", description = "ID of the order that needs to be deleted", required = true) @PathVariable("orderId") Long orderId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /store/inventory : JSON values in random order.
     * Returns a map of status codes to quantities. Values in JSON are in random order.
     *
     * @return successful operation (status code 200)
     */
    @ApiVirtual
    @Operation(
            operationId = "getInventory",
            summary = "JSON values in random order.",
            tags = {"store", "troublemaker"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Map.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "api_key")
            }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/store/inventory",
        produces = { "application/json" }
    )
    default ResponseEntity<Map<String, Integer>> getInventory(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /store/order/{orderId} : Data contain float numbers.
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generate exceptions.
     *
     * @param orderId ID of order that needs to be fetched (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Order not found (status code 404)
     */
    @ApiVirtual
    @Operation(
            operationId = "getOrderById",
            summary = "Data contain float numbers.",
            tags = {"store", "troublemaker"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                    @ApiResponse(responseCode = "404", description = "Order not found")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/store/order/{orderId}",
            produces = {"application/json"}
    )
    default ResponseEntity<Order> getOrderById(
            @Parameter(name = "orderId", description = "ID of order that needs to be fetched", required = true) @PathVariable("orderId") Long orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"petId\" : 198772, \"rabatt\" : 25.9, \"quantity\" : 7, \"pricebrutto\" : 345.45, \"pricenetto\" : 300.0, \"id\" : 10, \"shipDate\" : \"2017-07-21T17:32:28Z\", \"complete\" : true, \"status\" : \"approved\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /store/orders : A list of all orders.
     * A list of all orders.
     *
     * @return successful operation (status code 200)
     * or Invalid input (status code 400)
     */
    @ApiVirtual
    @Operation(
            operationId = "listAllOrders",
            summary = "A list of all orders.",
            tags = {"store"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid input")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/store/orders",
            produces = {"application/json"}
    )
    default ResponseEntity<List<Order>> listAllOrders(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"petId\" : 198772, \"rabatt\" : 25.9, \"quantity\" : 7, \"pricebrutto\" : 345.45, \"pricenetto\" : 300.0, \"id\" : 10, \"shipDate\" : \"2017-07-21T17:32:28Z\", \"complete\" : true, \"status\" : \"approved\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /store/order : Place an order for a pet
     * Place a new order in the store
     *
     * @param order  (optional)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiVirtual
    @Operation(
            operationId = "placeOrder",
            summary = "Place an order for a pet",
            tags = {"store"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Invalid input")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/store/order",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<Order> placeOrder(
            @Parameter(name = "Order", description = "") @Valid @RequestBody(required = false) Order order
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"petId\" : 198772, \"rabatt\" : 25.9, \"quantity\" : 7, \"pricebrutto\" : 345.45, \"pricenetto\" : 300.0, \"id\" : 10, \"shipDate\" : \"2017-07-21T17:32:28Z\", \"complete\" : true, \"status\" : \"approved\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /store/order/{orderId} : Update order.
     * Update one order by Id.
     *
     * @param orderId ID of order that needs to be fetched (required)
     * @return successful PUT operation. (status code 200)
     * or Invalid ID supplied (status code 400)
     * or Order not found (status code 404)
     */
    @ApiVirtual
    @Operation(
            operationId = "putOrderById",
            summary = "Update order.",
            tags = {"store"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful PUT operation.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                    @ApiResponse(responseCode = "404", description = "Order not found")
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/store/order/{orderId}",
            produces = {"application/json"}
    )
    default ResponseEntity<Order> putOrderById(
            @Parameter(name = "orderId", description = "ID of order that needs to be fetched", required = true) @PathVariable("orderId") Long orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"petId\" : 198772, \"rabatt\" : 25.9, \"quantity\" : 7, \"pricebrutto\" : 345.45, \"pricenetto\" : 300.0, \"id\" : 10, \"shipDate\" : \"2017-07-21T17:32:28Z\", \"complete\" : true, \"status\" : \"approved\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
